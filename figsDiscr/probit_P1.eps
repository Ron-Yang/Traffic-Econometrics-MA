%!PS-Adobe-2.0 EPSF-2.0
%%Title: probit_P1.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Sat Jan 24 20:38:16 2009
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid true def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -66 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
currentdict /CharStrings known {
	CharStrings /Idieresis known {
		/Encoding ISOLatin1Encoding def } if
} if
currentdict end definefont
} def
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
/Helvetica reencodeISO def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 200 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
1020 600 M
5840 0 V
1.000 UL
LTb
1020 600 M
63 0 V
5777 0 R
-63 0 V
stroke
900 600 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1020 1400 M
5840 0 V
1.000 UL
LTb
1020 1400 M
63 0 V
5777 0 R
-63 0 V
stroke
900 1400 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 0.2)]
] -66.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1020 2200 M
5840 0 V
1.000 UL
LTb
1020 2200 M
63 0 V
5777 0 R
-63 0 V
stroke
900 2200 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 0.4)]
] -66.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1020 3000 M
5840 0 V
1.000 UL
LTb
1020 3000 M
63 0 V
5777 0 R
-63 0 V
stroke
900 3000 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 0.6)]
] -66.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1020 3800 M
5840 0 V
1.000 UL
LTb
1020 3800 M
63 0 V
5777 0 R
-63 0 V
stroke
900 3800 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 0.8)]
] -66.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1020 4600 M
5840 0 V
1.000 UL
LTb
1020 4600 M
63 0 V
5777 0 R
-63 0 V
stroke
900 4600 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 1)]
] -66.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1114 600 M
0 4200 V
1.000 UL
LTb
1114 600 M
0 63 V
0 4137 R
0 -63 V
stroke
1114 400 M
[ [(Helvetica) 200.0 0.0 true true 0 (-3)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
2056 600 M
0 4200 V
1.000 UL
LTb
2056 600 M
0 63 V
0 4137 R
0 -63 V
stroke
2056 400 M
[ [(Helvetica) 200.0 0.0 true true 0 (-2)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
2998 600 M
0 4200 V
1.000 UL
LTb
2998 600 M
0 63 V
0 4137 R
0 -63 V
stroke
2998 400 M
[ [(Helvetica) 200.0 0.0 true true 0 (-1)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
3940 600 M
0 4200 V
1.000 UL
LTb
3940 600 M
0 63 V
0 4137 R
0 -63 V
stroke
3940 400 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 0)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
4882 600 M
0 160 V
0 600 R
0 3440 V
1.000 UL
LTb
4882 600 M
0 63 V
0 4137 R
0 -63 V
stroke
4882 400 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 1)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
5824 600 M
0 160 V
0 600 R
0 3440 V
1.000 UL
LTb
5824 600 M
0 63 V
0 4137 R
0 -63 V
stroke
5824 400 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 2)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTa
6766 600 M
0 160 V
0 600 R
0 3440 V
1.000 UL
LTb
6766 600 M
0 63 V
0 4137 R
0 -63 V
stroke
6766 400 M
[ [(Helvetica) 200.0 0.0 true true 0 ( 3)]
] -66.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
1020 600 M
5840 0 V
0 4200 V
-5840 0 V
0 -4200 V
LTb
200 2700 M
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 200.0 0.0 true true 0 (Auswahlwahrscheinlichkeit A)]
[(Helvetica) 160.0 -60.0 true true 0 (1)]
] -46.7 MCshow
grestore
LTb
3940 100 M
[ [(Helvetica) 200.0 0.0 true true 0 (Mittlere Nutzendifferenz u)]
[(Helvetica) 160.0 -60.0 true true 0 (1)]
[(Helvetica) 200.0 0.0 true true 0 (-u)]
[(Helvetica) 160.0 -60.0 true true 0 (2)]
] -46.7 MCshow
1.000 UP
6.000 UL
LT2
LTb
5999 1260 M
[ [(Helvetica) 200.0 0.0 true true 0 (F)]
[(Helvetica) 160.0 -60.0 true true 0 (1)]
[(Helvetica) 200.0 0.0 true true 0 (\(x\))]
] -46.7 MRshow
LT2
6119 1260 M
543 0 V
1020 604 M
59 1 V
59 1 V
59 1 V
59 2 V
59 2 V
59 2 V
59 3 V
59 3 V
59 3 V
59 5 V
59 5 V
59 6 V
59 7 V
59 7 V
59 9 V
59 11 V
59 12 V
59 13 V
59 15 V
59 17 V
59 20 V
59 21 V
59 24 V
59 27 V
59 29 V
59 32 V
59 36 V
59 38 V
59 42 V
59 46 V
59 49 V
59 53 V
59 57 V
59 60 V
59 65 V
59 68 V
59 71 V
59 76 V
59 79 V
59 82 V
59 85 V
59 88 V
59 91 V
59 93 V
59 95 V
59 97 V
59 98 V
59 99 V
59 100 V
58 100 V
59 100 V
59 99 V
59 98 V
59 97 V
59 95 V
59 93 V
59 91 V
59 88 V
59 85 V
59 82 V
59 79 V
59 76 V
59 71 V
59 68 V
59 65 V
59 60 V
59 57 V
59 53 V
59 49 V
59 46 V
59 42 V
59 38 V
59 36 V
59 32 V
59 29 V
59 27 V
59 24 V
59 21 V
59 20 V
59 17 V
59 15 V
59 13 V
59 12 V
59 11 V
59 9 V
59 7 V
59 7 V
59 6 V
59 5 V
59 5 V
59 3 V
59 3 V
59 3 V
59 2 V
59 2 V
59 2 V
59 1 V
59 1 V
59 1 V
6.000 UL
LT1
LTb
5999 1060 M
[ [(Helvetica) 200.0 0.0 true true 0 (F)]
[(Helvetica) 160.0 -60.0 true true 0 (2)]
[(Helvetica) 200.0 0.0 true true 0 (\(x\))]
] -46.7 MRshow
LT1
6119 1060 M
543 0 V
1020 657 M
59 6 V
59 8 V
59 8 V
59 9 V
59 10 V
59 10 V
59 12 V
59 12 V
59 14 V
59 15 V
59 15 V
59 18 V
59 18 V
59 20 V
59 21 V
59 23 V
59 24 V
59 26 V
59 28 V
59 29 V
59 31 V
59 33 V
59 34 V
59 37 V
59 38 V
59 40 V
59 42 V
59 44 V
59 46 V
59 48 V
59 49 V
59 52 V
59 53 V
59 55 V
59 57 V
59 58 V
59 60 V
59 61 V
59 63 V
59 64 V
59 65 V
59 67 V
59 67 V
59 68 V
59 69 V
59 70 V
59 70 V
59 70 V
59 71 V
58 70 V
59 71 V
59 70 V
59 70 V
59 70 V
59 69 V
59 68 V
59 67 V
59 67 V
59 65 V
59 64 V
59 63 V
59 61 V
59 60 V
59 58 V
59 57 V
59 55 V
59 53 V
59 52 V
59 49 V
59 48 V
59 46 V
59 44 V
59 42 V
59 40 V
59 38 V
59 37 V
59 34 V
59 33 V
59 31 V
59 29 V
59 28 V
59 26 V
59 24 V
59 23 V
59 21 V
59 20 V
59 18 V
59 18 V
59 15 V
59 15 V
59 14 V
59 12 V
59 12 V
59 10 V
59 10 V
59 9 V
59 8 V
59 8 V
59 6 V
0.700 UP
6.000 UL
LT0
LTb
5999 860 M
[ [(Helvetica) 200.0 0.0 true true 0 (A)]
[(Helvetica) 160.0 -60.0 true true 0 (1,Probit)]
[(Helvetica) 200.0 0.0 true true 0 (\(x\))]
] -46.7 MRshow
LT0
6119 860 M
543 0 V
1020 747 M
59 12 V
59 13 V
59 13 V
59 15 V
59 15 V
59 17 V
59 17 V
59 18 V
59 19 V
59 20 V
59 22 V
59 22 V
59 24 V
59 25 V
59 25 V
59 28 V
59 28 V
59 29 V
59 31 V
59 32 V
59 34 V
59 34 V
59 36 V
59 37 V
59 38 V
59 40 V
59 41 V
59 42 V
59 43 V
59 45 V
59 45 V
59 47 V
59 48 V
59 48 V
59 50 V
59 51 V
59 52 V
59 52 V
59 53 V
59 54 V
59 55 V
59 56 V
59 55 V
59 57 V
59 56 V
59 58 V
59 57 V
59 57 V
59 58 V
58 58 V
59 58 V
59 57 V
59 57 V
59 58 V
59 56 V
59 57 V
59 55 V
59 56 V
59 55 V
59 54 V
59 53 V
59 52 V
59 52 V
59 51 V
59 50 V
59 48 V
59 48 V
59 47 V
59 45 V
59 45 V
59 43 V
59 42 V
59 41 V
59 40 V
59 38 V
59 37 V
59 36 V
59 34 V
59 34 V
59 32 V
59 31 V
59 29 V
59 28 V
59 28 V
59 25 V
59 25 V
59 24 V
59 22 V
59 22 V
59 20 V
59 19 V
59 18 V
59 17 V
59 17 V
59 15 V
59 15 V
59 13 V
59 13 V
59 12 V
1020 747 Box
1079 759 Box
1138 772 Box
1197 785 Box
1256 800 Box
1315 815 Box
1374 832 Box
1433 849 Box
1492 867 Box
1551 886 Box
1610 906 Box
1669 928 Box
1728 950 Box
1787 974 Box
1846 999 Box
1905 1024 Box
1964 1052 Box
2023 1080 Box
2082 1109 Box
2141 1140 Box
2200 1172 Box
2259 1206 Box
2318 1240 Box
2377 1276 Box
2436 1313 Box
2495 1351 Box
2554 1391 Box
2613 1432 Box
2672 1474 Box
2731 1517 Box
2790 1562 Box
2849 1607 Box
2908 1654 Box
2967 1702 Box
3026 1750 Box
3085 1800 Box
3144 1851 Box
3203 1903 Box
3262 1955 Box
3321 2008 Box
3380 2062 Box
3439 2117 Box
3498 2173 Box
3557 2228 Box
3616 2285 Box
3675 2341 Box
3734 2399 Box
3793 2456 Box
3852 2513 Box
3911 2571 Box
3969 2629 Box
4028 2687 Box
4087 2744 Box
4146 2801 Box
4205 2859 Box
4264 2915 Box
4323 2972 Box
4382 3027 Box
4441 3083 Box
4500 3138 Box
4559 3192 Box
4618 3245 Box
4677 3297 Box
4736 3349 Box
4795 3400 Box
4854 3450 Box
4913 3498 Box
4972 3546 Box
5031 3593 Box
5090 3638 Box
5149 3683 Box
5208 3726 Box
5267 3768 Box
5326 3809 Box
5385 3849 Box
5444 3887 Box
5503 3924 Box
5562 3960 Box
5621 3994 Box
5680 4028 Box
5739 4060 Box
5798 4091 Box
5857 4120 Box
5916 4148 Box
5975 4176 Box
6034 4201 Box
6093 4226 Box
6152 4250 Box
6211 4272 Box
6270 4294 Box
6329 4314 Box
6388 4333 Box
6447 4351 Box
6506 4368 Box
6565 4385 Box
6624 4400 Box
6683 4415 Box
6742 4428 Box
6801 4441 Box
6860 4453 Box
6390 860 Box
1.000 UL
LTb
1020 600 M
5840 0 V
0 4200 V
-5840 0 V
0 -4200 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
